#!/usr/bin/env python3
"""
usage:
    permutation encode //
    permutation decode //
    permutation languages //
    permutation decks //
    permutation -h //

e.g. tragedia malinteso attorno lacuna invece michele produrre vispo
     brillante buio valgo umano
     A♥ 2♥ 3♥ 4♥ 5♥ 6♥ 7♥ 8♥ 9♥ 10♥ J♥ Q♥ K♥ A♦ 2♦ 3♦ 4♦ 4♠ 5♠ 8♠ 3♣
     4♣ 8♦ 7♦ 2♣ K♠ Q♠ 7♠ J♦ 9♠ 9♣ A♣ Q♦ 5♦ 10♠ 3♠ K♦ K♣ 10♦ 10♣ 2♠
     9♦ J♠ 8♣ A♠ Q♣ 6♠ J♣ 6♦ 6♣ 7♣ 5♣
"""
import argparse
from getpass import getpass
from permutation.encryption import crypt_data
from permutation.ordering import (
    encode, decode, get_orderings)
from permutation.mnemonic import (
    mnemonic_to_integer, integer_to_mnemonic, get_languages)
from permutation.utils import log


def get_passwd():
    """Wrap getpass"""
    password = None
    while True:
        password = getpass('Insert the password: ')
        confirm = getpass('Confirm the password: ')
        if password != confirm:
            print('Retry')
        else:
            break
    return password


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('mode', type=str,
                        help='encode, decode, languages or desks')
    parser.add_argument('--deck', dest='deck', type=str,
                        default='french-symbols',
                        help='objects of the permutation')
    parser.add_argument('--language', dest='language', type=str,
                        default='english',
                        help='~ of the seed wordlist')
    parser.add_argument('--sep', dest='sep', type=str,
                        default=' ',
                        help='separator of permutation objects')
    # Unsafe arguments
    parser.add_argument('--seed-unsafe', dest='seed', type=str,
                        help='BIP39 seed. *UNSAFE*')
    parser.add_argument('--password-unsafe', dest='password', type=str,
                        help='*UNSAFE*')
    parser.add_argument('--permutation-unsafe', dest='permutation', type=str,
                        help='*UNSAFE*')

    args = parser.parse_args()

    if args.mode in ('encode', 'decode'):
        print('!!! WARNING !!!')
        print('  This is experimental software.')
        print('  Do not use it in production environment, '
              'backward compatibility is not guaranteed.')
        print('!!! WARNING !!!')
        print()

    if args.mode == 'encode':
        seed = args.seed or input('BIP39 seed: ')
        integer = mnemonic_to_integer(seed.split(
            None if args.sep == ' ' else args.sep))
        log('decrypted integer', integer)
        integer = crypt_data(integer, args.mode, args.deck,
                             args.password or get_passwd())
        log('encrypted integer', integer)
        print(args.sep.join(decode(args.deck, integer)))
    elif args.mode == 'decode':
        perm = args.permutation or input('Cards permutation: ')
        integer = encode([word.strip() for word in perm.split(args.sep)])
        log('encrypted integer', integer)
        integer = crypt_data(integer, args.mode, args.deck,
                             args.password or get_passwd())
        log('decrypted integer', integer)
        print(args.sep.join(integer_to_mnemonic(integer, args.language)))
    elif args.mode == 'languages':
        print(' '.join(get_languages()))
    elif args.mode == 'decks':
        print(' '.join(get_orderings()))


if __name__ == "__main__":
    main()
